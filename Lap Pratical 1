#include <stdio.h>
#include <stdbool.h>

#define NUM_PROCESSES 4
#define NUM_RESOURCES 3

int main() {
    // Define the claim matrix and allocation matrix
    int claim[NUM_PROCESSES][NUM_RESOURCES] = {
        {3, 2, 2},
        {6, 1, 3},
        {3, 1, 4},
        {4, 2, 2}
    };
    int allocation[NUM_PROCESSES][NUM_RESOURCES] = {
        {1, 0, 0},
        {6, 1, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    // Define the available resource vector
    int available[NUM_RESOURCES] = {9, 3, 6};

    // Define the need matrix and finish vector
    int need[NUM_PROCESSES][NUM_RESOURCES];
    bool finish[NUM_PROCESSES];
    for (int i = 0; i < NUM_PROCESSES; i++) {
        for (int j = 0; j < NUM_RESOURCES; j++) {
            need[i][j] = claim[i][j] - allocation[i][j];
        }
        finish[i] = false;
    }

    // Define a counter to keep track of how many processes have been finished
    int count = 0;

    // Define a loop to check for a safe sequence
    bool safe = true;
    int safe_sequence[NUM_PROCESSES];
    int sequence_count = 0;
    while (count < NUM_PROCESSES) {
        // Define a variable to keep track of whether any process can be satisfied
        bool found = false;

        // Define a loop to check if a process can be satisfied
        for (int i = 0; i < NUM_PROCESSES; i++) {
            if (!finish[i]) {
                bool can_satisfy = true;
                for (int j = 0; j < NUM_RESOURCES; j++) {
                    if (need[i][j] > available[j]) {
                        can_satisfy = false;
                        break;
                    }
                }
                if (can_satisfy) {
                    // The process can be satisfied
                    found = true;
                    finish[i] = true;
                    count++;
                    for (int j = 0; j < NUM_RESOURCES; j++) {
                        available[j] += allocation[i][j];
                    }
                    safe_sequence[sequence_count++] = i;
                    break;
                }
            }
        }

        // If no process can be satisfied, the system is not in a safe state
        if (!found) {
            safe = false;
            break;
        }
    }

    // Print the safe sequence if the system is in a safe state
    if (safe) {
        printf("Safe sequence: ");
        for (int i = 0; i < NUM_PROCESSES; i++) {
            printf("%d ", safe_sequence[i]);
        }
        printf("\n");
    } else {
        printf("Unsafe state\n");
    }

    return 0;
}
